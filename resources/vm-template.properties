junit.generator.ui.title.vm=Velocity Template
junit.generator.ui.title.properties=Properties
junit.generator.vm.names=JUnit 4
junit.generator.vm.1=\
######################################################################################## \n\
## \n\
## Available variables: \n\
##         $entryList.methodList - List of method composites \n\
##         $entryList.publicConstructorsCompositeList - List of public contructors \n\
##         $entryList.nonPublicConstructorCompositeList - List of non public contructors \n\
##         $entryList.privateMethodList - List of private method composites \n\
##         $entryList.fieldList - ArrayList of class scope field names \n\
##         $entryList.className - class name \n\
##         $entryList.packageName - package name \n\
##         $today - Todays date in MM/dd/yyyy format \n\
## \n\
##            MethodComposite variables: \n\
##                $method.name - Method Name \n\
##                $method.signature - Full method signature in String form \n\
##                $method.code - list of strings representing code, when are non Public the code is commented \
  out reflection code to access method (non Public Constructor or Methods) \n\
##                $method.paramNames - List of Strings representing the method's parameters' names \n\
##                $method.paramClasses - List of Strings representing the method's parameters' classes \n\
## \n\
## You can configure the output class name using "testClass" variable below. \n\
## Here are some examples: \n\
## Test${entry.ClassName} - will produce TestSomeClass \n\
## ${entry.className}Test - will produce SomeClassTest \n\
## \n\
######################################################################################## \n\
## \n\
#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end \n\
#macro (uncap $strIn)$strIn.valueOf($strIn.charAt(0)).toLowerCase()$strIn.substring(1)#end \n\
## Iterate through the list and generate testcase for every entry. \n\
#foreach ($entry in $entryList) \n\
#set( $testClass="${entry.className}Test") \n\
## \n\
package $entry.packageName; \n\
 \n\
import org.junit.Assert; \n\
\n\
import java.lang.reflect.Constructor; \n\
import java.lang.reflect.Method; \n\
import java.lang.reflect.InvocationTargetException; \n\
\n\
import org.junit.Test; \n\
import org.junit.After;\n\
import org.junit.Before;\n\
import org.junit.runner.RunWith;\n\
import org.mockito.InjectMocks;\n\
import org.mockito.MockitoAnnotations;\n\
import org.mockito.runners.MockitoJUnitRunner;\n\
import org.slf4j.Logger;\n\
import org.slf4j.LoggerFactory;\n\
\n\
#foreach($string in $entry.importList) \n\
$string \n\
#end \n\
 \n\
/** \n\
 * ${entry.className} Tester. \n\
 * \n\
 * @author <Authors name> \n\
 * @since <pre>$date</pre> \n\
 * @version 1.0 \n\
 */ \n\
 @RunWith(MockitoJUnitRunner.class) \n\
public class $testClass { \n\
 private static final Logger LOGGER = LoggerFactory.getLogger(${entry.className}.class);\n\
 \n\
 ${entry.className} cut;\n\
 \n\
#foreach($string in $entry.mockList) \n\
$string \n\
#end \n\
 \n\
    @Before\n\
    public void before() throws Exception { \n\
    MockitoAnnotations.initMocks(this); \n\
    } \n\
 \n\
    @After\n\
    public void after() throws Exception { \n\
    } \n\
 \n\
\n\
#foreach($method in $entry.publicConstructorsCompositeList) \n\
    /** \n\
     * \n\
     * Constructor: $method.signature \n\
     * \n\
     */ \n\
    @Test\n\
    public void test#cap(${method.name})() throws Exception { \n\
        //Given:\n\
        // Setup the system under test\n\
        \n\
#foreach($string in $method.code) \n\
    $string \n\
#end \n\
        //Then:\n\
        Assert.assertNotNull(cut);\n\
        // Assert that the expected change has occurred\n\
        Assert.fail("Missing assertions");\n\
    } \n\
 \n\
#end \n\
 \n\
#foreach($method in $entry.nonPublicConstructorCompositeList) \n\
    /** \n\
     * \n\
     * Method: $method.signature \n\
     * \n\
     */ \n\
    @Test\n\
    public void test#cap(${method.name})() throws Exception { \n\
        //Given:\n\
        // Setup the system under test\n\
        \n\
#foreach($string in $method.code) \n\
    $string \n\
    #end \n\
        \n\
        //Then:\n\
        Assert.assertNotNull(cut);\n\
        // Assert that the expected change has occurred\n\
        Assert.fail("Missing assertions");\n\
    } \n\
 \n\
#end \n\
\n\
#foreach($method in $entry.methodList) \n\
    /** \n\
     * \n\
     * Constructor: $method.signature \n\
     * \n\
     */ \n\
    @Test $method.expectedException\n\
    public void test#cap(${method.name})() throws Exception { \n\
        //Given:\n\
        // Setup the system under test\n\
        \n\
#foreach($string in $method.code) \n\
    $string \n\
#end \n\
        \n\
        //Then:\n\
        Assert.assertNotNull(cut);\n\
        // Assert that the expected change has occurred\n\
        Assert.fail("Missing assertions");\n\
    } \n\
 \n\
#end \n\
 \n\
#foreach($method in $entry.privateMethodList) \n\
    /** \n\
     * \n\
     * Method: $method.signature \n\
     * \n\
     */ \n\
    @Test $method.expectedException\n\
    public void test#cap(${method.name})() throws Exception { \n\
        //Given:\n\
        // Setup the system under test\n\
        \n\
#foreach($string in $method.code) \n\
    $string \n\
#end \n\
        \n\
        //Then:\n\
        Assert.assertNotNull(cut);\n\
        // Assert that the expected change has occurred\n\
        Assert.fail("Missing assertions");\n\
    } \n\
 \n\
#end \n\
} \n\
#end
junit.generator.ui.title.combinegetterandsetter=Combine Getter and Setter
junit.generator.ui.title.generateforoverloaded=Generate for Overloaded Methods
junit.generator.file.exists=File already exists. Do you want to see the difference between the old and the new test cases?\n\
  By answering 'No' you will overwrite an existing file.
junit.generator.error.title=Error
junit.generator.error.noselectedtemplate=There does not appear to be a valid template. Is one configured? Check the settings.
junit.generator.ui.outputPath=Output Pattern definition file. \\ Available variables\:\\      $SOURCEPATH$ - location where source code for current project resides\\      $PACKAGE$ - package path where TestedClass resides\\      $FILENAME$ - Filename of the testClass. Note\: if you modify filename only\\      the file name will be affected not a class name\\ \\ Anything before $SOURCEPATH$ will be ignored. If you need to go outside of the\\ sourcepath use $SOURCEPATH$/../\\   \\ Developers using maven should probably use $SOURCEPATH$/../../test/mai\n\ \\ For project specific configuration you can add separate line for every project.\\ Earch line must start with project name. i.e\\ junitgen\=$SOURCEPATH$/testing/$PACKAGE$/$FILENAME$\\ If project specific configuration does not exist, the following line will be used.
junit.generator.ui.outputPath.label=Output Path\:
junit.generator.outputPath=${SOURCEPATH}/../tst/${PACKAGE}/${FILENAME}
junit.generator.ui.generateStyle.label=Method Generation Style\:
junit.generator.ui.diff.titles=Generated Test,Merge Result,Existing Test
junit.generator.ui.diff.window.title=Generated JUnit Merge
junit.generator.ui.selectedvm.label=Default Template\: